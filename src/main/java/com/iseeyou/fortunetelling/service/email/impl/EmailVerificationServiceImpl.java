package com.iseeyou.fortunetelling.service.email.impl;

import com.iseeyou.fortunetelling.entity.EmailVerification;
import com.iseeyou.fortunetelling.entity.user.User;
import com.iseeyou.fortunetelling.exception.NotFoundException;
import com.iseeyou.fortunetelling.repository.EmailVerificationRepository;
import com.iseeyou.fortunetelling.repository.user.UserRepository;
import com.iseeyou.fortunetelling.service.email.EmailVerificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailVerificationServiceImpl implements EmailVerificationService {

    private final EmailVerificationRepository emailVerificationRepository;
    private final JavaMailSender mailSender;
    private final UserRepository userRepository;

    @Value("${spring.mail.username}")
    private String fromEmail;

    @Value("${app.name}")
    private String appName;

    private static final SecureRandom random = new SecureRandom();
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");

    @Override
    @Transactional
    public void sendVerificationEmail(String email) {
        try {
            // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ OTP c≈© c·ªßa email n√†y
            emailVerificationRepository.markAllOtpAsUsedByEmail(email);

            // T·∫°o OTP m·ªõi
            String otpCode = generateOtp();

            // L∆∞u OTP v√†o database
            EmailVerification verification = EmailVerification.builder()
                    .email(email)
                    .otpCode(otpCode)
                    .build();

            emailVerificationRepository.save(verification);

            // G·ª≠i email
            sendOtpEmail(email, otpCode, "X√°c th·ª±c email");

            log.info("Verification email sent successfully to: {}", email);

        } catch (Exception e) {
            log.error("Failed to send verification email to: {}", email, e);
            throw new RuntimeException("Failed to send verification email");
        }
    }

    @Override
    @Transactional
    public void sendPasswordResetEmail(String email) {
        try {
            // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ OTP c≈© c·ªßa email n√†y
            emailVerificationRepository.markAllOtpAsUsedByEmail(email);

            // T·∫°o OTP m·ªõi
            String otpCode = generateOtp();

            // L∆∞u OTP v√†o database
            EmailVerification verification = EmailVerification.builder()
                    .email(email)
                    .otpCode(otpCode)
                    .build();

            emailVerificationRepository.save(verification);

            // G·ª≠i email reset password
            sendOtpEmail(email, otpCode, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");

            log.info("Password reset email sent successfully to: {}", email);

        } catch (Exception e) {
            log.error("Failed to send password reset email to: {}", email, e);
            throw new RuntimeException("Failed to send password reset email");
        }
    }


    @Override
    @Transactional
    public boolean verifyOtp(String email, String otpCode) {
        try {
            Optional<EmailVerification> verificationOpt = emailVerificationRepository
                    .findByEmailAndOtpCodeAndIsUsedFalse(email, otpCode);

            if (verificationOpt.isEmpty()) {
                log.warn("Invalid OTP attempted for email: {}", email);
                return false;
            }

            EmailVerification verification = verificationOpt.get();

            if (verification.isExpired()) {
                log.warn("Expired OTP attempted for email: {}", email);
                return false;
            }

            // ƒê√°nh d·∫•u OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
            verification.setUsed(true);
            emailVerificationRepository.save(verification);

            log.info("OTP verified successfully for email: {}", email);
            return true;
        } catch (Exception e) {
            log.error("Failed to verify OTP for email: {}", email, e);
            return false;
        }
    }


    @Override
    @Transactional
    public void cleanupExpiredOtps() {
        emailVerificationRepository.deleteExpiredOtps(LocalDateTime.now());
        log.info("Cleaned up expired OTPs");
    }

    @Override
    public void sendLoginAlertEmail(UUID userId, String ipAddress, String deviceInfo, String location, LocalDateTime loginTime) {
        try {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new NotFoundException("User not found"));

            String subject = appName + " - Th√¥ng b√°o ƒëƒÉng nh·∫≠p";
            String content = String.format(
                    "Xin ch√†o %s!\n\n" +
                            "Ch√∫ng t√¥i nh·∫≠n th·∫•y c√≥ m·ªôt ho·∫°t ƒë·ªông ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n:\n\n" +
                            "Th·ªùi gian: %s\n" +
                            "ƒê·ªãa ch·ªâ IP: %s\n" +
                            "Thi·∫øt b·ªã: %s\n" +
                            "V·ªã tr√≠: %s\n\n" +
                            "N·∫øu ƒë√¢y l√† b·∫°n, b·∫°n c√≥ th·ªÉ b·ªè qua email n√†y.\n" +
                            "N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng thay ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c v√† li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n" +
                            "Tr√¢n tr·ªçng,\n%s Team",
                    user.getFullName(),
                    loginTime.format(FORMATTER),
                    ipAddress,
                    deviceInfo,
                    location != null ? location : "Kh√¥ng x√°c ƒë·ªãnh",
                    appName
            );

            sendEmail(user.getEmail(), subject, content);
            log.info("Sent login alert email to user {}", userId);

        } catch (Exception e) {
            log.error("Failed to send login alert email to user {}", userId, e);
        }
    }

    @Override
    public void sendNewDeviceAlertEmail(UUID userId, String ipAddress, String deviceInfo, String location, LocalDateTime loginTime) {
        try {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new NotFoundException("User not found"));

            String subject = appName + " - ‚ö†Ô∏è C·∫£nh b√°o ƒëƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã m·ªõi";
            String content = String.format(
                    "Xin ch√†o %s!\n\n" +
                            "!! C·∫¢NH B√ÅO B·∫¢O M·∫¨T !!\n\n" +
                            "Ch√∫ng t√¥i ph√°t hi·ªán ƒëƒÉng nh·∫≠p t·ª´ m·ªôt thi·∫øt b·ªã M·ªöI v√†o t√†i kho·∫£n c·ªßa b·∫°n:\n\n" +
                            "Th·ªùi gian: %s\n" +
                            "ƒê·ªãa ch·ªâ IP: %s\n" +
                            "Thi·∫øt b·ªã: %s\n" +
                            "V·ªã tr√≠: %s\n\n" +
                            "N·∫øu ƒë√¢y l√† b·∫°n:\n" +
                            "- B·∫°n c√≥ th·ªÉ b·ªè qua email n√†y\n" +
                            "- Thi·∫øt b·ªã n√†y s·∫Ω ƒë∆∞·ª£c ghi nh·ªõ cho c√°c l·∫ßn ƒëƒÉng nh·∫≠p sau\n\n" +
                            "N·∫øu KH√îNG ph·∫£i b·∫°n:\n" +
                            "- Thay ƒë·ªïi m·∫≠t kh·∫©u NGAY L·∫¨P T·ª®C\n" +
                            "- Ki·ªÉm tra c√°c ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y trong t√†i kho·∫£n\n" +
                            "- Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£\n\n" +
                            "Tr√¢n tr·ªçng,\n%s Team",
                    user.getFullName(),
                    loginTime.format(FORMATTER),
                    ipAddress,
                    deviceInfo,
                    location != null ? location : "Kh√¥ng x√°c ƒë·ªãnh",
                    appName
            );

            sendEmail(user.getEmail(), subject, content);
            log.info("Sent new device alert email to user {}", userId);

        } catch (Exception e) {
            log.error("Failed to send new device alert email to user {}", userId, e);
        }
    }

    @Override
    public void sendLogoutAlertEmail(UUID userId, String deviceInfo, LocalDateTime logoutTime) {
        try {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new NotFoundException("User not found"));

            String subject = appName + " - Th√¥ng b√°o ƒëƒÉng xu·∫•t";
            String content = String.format(
                    "Xin ch√†o %s!\n\n" +
                            "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒëƒÉng xu·∫•t:\n\n" +
                            "Th·ªùi gian: %s\n" +
                            "Thi·∫øt b·ªã: %s\n\n" +
                            "N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay.\n\n" +
                            "Tr√¢n tr·ªçng,\n%s Team",
                    user.getFullName(),
                    logoutTime.format(FORMATTER),
                    deviceInfo,
                    appName
            );

            sendEmail(user.getEmail(), subject, content);
            log.info("Sent logout alert email to user {}", userId);

        } catch (Exception e) {
            log.error("Failed to send logout alert email to user {}", userId, e);
        }
    }

    @Override
    public void sendSecurityAlertEmail(UUID userId, String alertMessage, String severity) {
        try {
            User user = userRepository.findById(userId)
                    .orElseThrow(() -> new NotFoundException("User not found"));

            String emoji = severity.equals("HIGH") ? "üö®" : "‚ö†Ô∏è";
            String subject = appName + " - " + emoji + " C·∫£nh b√°o b·∫£o m·∫≠t " + severity;
            String content = String.format(
                    "Xin ch√†o %s!\n\n" +
                            "%s C·∫¢NH B√ÅO B·∫¢O M·∫¨T [%s] %s\n\n" +
                            "%s\n\n" +
                            "Khuy·∫øn ngh·ªã:\n" +
                            "- Thay ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c\n" +
                            "- Ki·ªÉm tra c√°c ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y\n" +
                            "- ƒê·∫£m b·∫£o kh√¥ng ai kh√°c c√≥ quy·ªÅn truy c·∫≠p t√†i kho·∫£n c·ªßa b·∫°n\n" +
                            "- Li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu c·∫ßn h·ªó tr·ª£\n\n" +
                            "Tr√¢n tr·ªçng,\n%s Team",
                    user.getFullName(),
                    emoji,
                    severity,
                    emoji,
                    alertMessage,
                    appName
            );

            sendEmail(user.getEmail(), subject, content);
            log.info("Sent security alert email ({}) to user {}", severity, userId);

        } catch (Exception e) {
            log.error("Failed to send security alert email to user {}", userId, e);
        }
    }


    private String generateOtp() {
        return String.format("%06d", random.nextInt(1000000));
    }


    private void sendOtpEmail(String email, String otpCode, String subject) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(email);
        message.setSubject(appName + " - " + subject);

        String emailContent;
        if (subject.contains("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u")) {
            emailContent = String.format(
                    "Xin ch√†o!\n\n" +
                    "B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n t·∫°i %s.\n\n" +
                    "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: %s\n\n" +
                    "M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.\n\n" +
                    "N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y v√† m·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng thay ƒë·ªïi.\n\n" +
                    "Tr√¢n tr·ªçng,\n%s Team",
                    appName, otpCode, appName
            );
        } else {
            emailContent = String.format(
                    "Xin ch√†o!\n\n" +
                    "C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i %s.\n\n" +
                    "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: %s\n\n" +
                    "M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.\n\n" +
                    "N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.\n\n" +
                    "Tr√¢n tr·ªçng,\n%s Team",
                    appName, otpCode, appName
            );
        }

        message.setText(emailContent);
        mailSender.send(message);
    }

    private void sendEmail(String to, String subject, String content) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom(fromEmail);
        message.setTo(to);
        message.setSubject(subject);
        message.setText(content);
        mailSender.send(message);
    }
}
